package model

// Code generated by go-bridget/mig. DO NOT EDIT.

import (
	"time"
)

// User generated for db table `user`.
//
// Stores user profile information using ULID as primary key.
type User struct {
	// Primary key: ULID string
	ID string `db:"id"`

	// User first name
	FirstName string `db:"first_name"`

	// User last name
	LastName string `db:"last_name"`

	// Soft delete timestamp, NULL if active
	DeletedAt *time.Time `db:"deleted_at"`

	// Record creation timestamp
	CreatedAt *time.Time `db:"created_at"`

	// Record update timestamp
	UpdatedAt *time.Time `db:"updated_at"`
}

// GetID will return the value of ID.
func (u *User) GetID() string { return u.ID }

// GetFirstName will return the value of FirstName.
func (u *User) GetFirstName() string { return u.FirstName }

// GetLastName will return the value of LastName.
func (u *User) GetLastName() string { return u.LastName }

// GetDeletedAt will return the value of DeletedAt.
func (u *User) GetDeletedAt() *time.Time { return u.DeletedAt }

// SetDeletedAt sets DeletedAt to the provided value.
func (u *User) SetDeletedAt(stamp time.Time) { u.DeletedAt = &stamp }

// GetCreatedAt will return the value of CreatedAt.
func (u *User) GetCreatedAt() *time.Time { return u.CreatedAt }

// SetCreatedAt sets CreatedAt to the provided value.
func (u *User) SetCreatedAt(stamp time.Time) { u.CreatedAt = &stamp }

// GetUpdatedAt will return the value of UpdatedAt.
func (u *User) GetUpdatedAt() *time.Time { return u.UpdatedAt }

// SetUpdatedAt sets UpdatedAt to the provided value.
func (u *User) SetUpdatedAt(stamp time.Time) { u.UpdatedAt = &stamp }

// UserTable is the name of the table in the DB.
const UserTable = "`user`"

// UserFields is a list of all columns in the DB table.
var UserFields = []string{"id", "first_name", "last_name", "deleted_at", "created_at", "updated_at"}

// UserPrimaryFields are the primary key fields in the DB table.
var UserPrimaryFields = []string{"id"}

// UserAuth generated for db table `user_auth`.
//
// Stores user authentication credentials.
type UserAuth struct {
	// Reference to user.id (ULID)
	UserID string `db:"user_id"`

	// User email address, unique
	Email string `db:"email"`

	// Hashed password
	Password string `db:"password"`

	// Record creation timestamp
	CreatedAt *time.Time `db:"created_at"`

	// Record update timestamp
	UpdatedAt *time.Time `db:"updated_at"`
}

// GetUserID will return the value of UserID.
func (u *UserAuth) GetUserID() string { return u.UserID }

// GetEmail will return the value of Email.
func (u *UserAuth) GetEmail() string { return u.Email }

// GetPassword will return the value of Password.
func (u *UserAuth) GetPassword() string { return u.Password }

// GetCreatedAt will return the value of CreatedAt.
func (u *UserAuth) GetCreatedAt() *time.Time { return u.CreatedAt }

// SetCreatedAt sets CreatedAt to the provided value.
func (u *UserAuth) SetCreatedAt(stamp time.Time) { u.CreatedAt = &stamp }

// GetUpdatedAt will return the value of UpdatedAt.
func (u *UserAuth) GetUpdatedAt() *time.Time { return u.UpdatedAt }

// SetUpdatedAt sets UpdatedAt to the provided value.
func (u *UserAuth) SetUpdatedAt(stamp time.Time) { u.UpdatedAt = &stamp }

// UserAuthTable is the name of the table in the DB.
const UserAuthTable = "`user_auth`"

// UserAuthFields is a list of all columns in the DB table.
var UserAuthFields = []string{"user_id", "email", "password", "created_at", "updated_at"}

// UserAuthPrimaryFields are the primary key fields in the DB table.
var UserAuthPrimaryFields = []string{"user_id"}

// UserGroup generated for db table `user_group`.
//
// Stores user group information using ULID as primary key.
type UserGroup struct {
	// Primary key: ULID string
	ID string `db:"id"`

	// Group name/title
	Title string `db:"title"`

	// Record creation timestamp
	CreatedAt *time.Time `db:"created_at"`

	// Record update timestamp
	UpdatedAt *time.Time `db:"updated_at"`
}

// GetID will return the value of ID.
func (u *UserGroup) GetID() string { return u.ID }

// GetTitle will return the value of Title.
func (u *UserGroup) GetTitle() string { return u.Title }

// GetCreatedAt will return the value of CreatedAt.
func (u *UserGroup) GetCreatedAt() *time.Time { return u.CreatedAt }

// SetCreatedAt sets CreatedAt to the provided value.
func (u *UserGroup) SetCreatedAt(stamp time.Time) { u.CreatedAt = &stamp }

// GetUpdatedAt will return the value of UpdatedAt.
func (u *UserGroup) GetUpdatedAt() *time.Time { return u.UpdatedAt }

// SetUpdatedAt sets UpdatedAt to the provided value.
func (u *UserGroup) SetUpdatedAt(stamp time.Time) { u.UpdatedAt = &stamp }

// UserGroupTable is the name of the table in the DB.
const UserGroupTable = "`user_group`"

// UserGroupFields is a list of all columns in the DB table.
var UserGroupFields = []string{"id", "title", "created_at", "updated_at"}

// UserGroupPrimaryFields are the primary key fields in the DB table.
var UserGroupPrimaryFields = []string{"id"}

// UserGroupMember generated for db table `user_group_member`.
//
// Stores user memberships in groups using ULID for IDs.
type UserGroupMember struct {
	// Reference to user_group.id (ULID)
	UserGroupID string `db:"user_group_id"`

	// Reference to user.id (ULID)
	UserID string `db:"user_id"`

	// Timestamp when user joined the group
	JoinedAt *time.Time `db:"joined_at"`
}

// GetUserGroupID will return the value of UserGroupID.
func (u *UserGroupMember) GetUserGroupID() string { return u.UserGroupID }

// GetUserID will return the value of UserID.
func (u *UserGroupMember) GetUserID() string { return u.UserID }

// GetJoinedAt will return the value of JoinedAt.
func (u *UserGroupMember) GetJoinedAt() *time.Time { return u.JoinedAt }

// SetJoinedAt sets JoinedAt to the provided value.
func (u *UserGroupMember) SetJoinedAt(stamp time.Time) { u.JoinedAt = &stamp }

// UserGroupMemberTable is the name of the table in the DB.
const UserGroupMemberTable = "`user_group_member`"

// UserGroupMemberFields is a list of all columns in the DB table.
var UserGroupMemberFields = []string{"user_group_id", "user_id", "joined_at"}

// UserGroupMemberPrimaryFields are the primary key fields in the DB table.
var UserGroupMemberPrimaryFields = []string{"user_group_id", "user_id"}

// UserSession generated for db table `user_session`.
//
// Stores immutable user sessions with ULID IDs and expiration.
type UserSession struct {
	// Primary key: ULID string, also used as session token
	ID string `db:"id"`

	// Reference to user.id (ULID)
	UserID string `db:"user_id"`

	// Session expiration timestamp
	ExpiresAt *time.Time `db:"expires_at"`

	// Session creation timestamp
	CreatedAt *time.Time `db:"created_at"`
}

// GetID will return the value of ID.
func (u *UserSession) GetID() string { return u.ID }

// GetUserID will return the value of UserID.
func (u *UserSession) GetUserID() string { return u.UserID }

// GetExpiresAt will return the value of ExpiresAt.
func (u *UserSession) GetExpiresAt() *time.Time { return u.ExpiresAt }

// SetExpiresAt sets ExpiresAt to the provided value.
func (u *UserSession) SetExpiresAt(stamp time.Time) { u.ExpiresAt = &stamp }

// GetCreatedAt will return the value of CreatedAt.
func (u *UserSession) GetCreatedAt() *time.Time { return u.CreatedAt }

// SetCreatedAt sets CreatedAt to the provided value.
func (u *UserSession) SetCreatedAt(stamp time.Time) { u.CreatedAt = &stamp }

// UserSessionTable is the name of the table in the DB.
const UserSessionTable = "`user_session`"

// UserSessionFields is a list of all columns in the DB table.
var UserSessionFields = []string{"id", "user_id", "expires_at", "created_at"}

// UserSessionPrimaryFields are the primary key fields in the DB table.
var UserSessionPrimaryFields = []string{"id"}
